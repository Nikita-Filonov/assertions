{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scope of assertions methods, which provides simple interface for creating checks in autotests The main purpose of this library is to add generalization to allure steps, and to composing checks, as well as errors. When all checks look the same, they are better read and understood. This library uses pattern assert matches/objects. Which tells us that we should abstract our checks so that we don't have to duplicate them in the future. That is, if we have a check for the status of the response code, then we take it out into a separate function that will serve as this abstraction. Also, this pattern significantly increases the readability of the code.","title":"Home"},{"location":"builder/","text":"The builder function or assert_ allows us to write absolutely any checks. Arguments: left - actual result right - expected result what - any human-readable string which should describe what are you asserting operator - operator type of Operators , which will be used to compare values message - optional error message, which will be shown when error raised allure_message - optional allure step message, which will be used for allure step keys - used only for certain assert solutions. Ref to assert_all , assert_any Example of assert_ usage from assertions import assert_ , Operators assert_ ( 4 , 4 , 'Some equal numbers' , Operators . EQUAL ) assert_ ( 4 , 5 , 'Some lte numbers' , Operators . LTE ) assert_ ( 4 , 5 , 'Some not equal numbers' , Operators . NOT_EQUAL )","title":"Assertion builder"},{"location":"assertions/common/","text":"General checks that can be used to check anything assert_truth Used to check if an object is True from assertions import assert_truth assert_truth ([ 1 , 2 , 3 ], what = 'My array with integers' ) assert_truth ( 0 , what = 'My integer' ) assert_not_truth Used to check if an object is not True from assertions import assert_not_truth assert_not_truth ([ 1 , 2 , 3 ], what = 'My array with integers' ) assert_not_truth ( 0 , what = 'My integer' ) assert_all Used to compare two lists with objects. This method will iterate through each of the lists and compare the corresponding element with another. Expected that all values from actual, will equal to expected. Same as python all function. Note It is worth noting that when checking lists, sorting may not match. That is, if two lists have different sorting of elements, then the method will sort them and after that asserting will occur. This is true for all , any from assertions import assert_all actual = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_all ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' ) assert_any Used to compare two lists with objects. This method will iterate through each of the lists and compare the corresponding element with another. Expected that any values from actual, will equal to expected. Same as python any function. This will not raise an AssertionError from assertions import assert_any actual = [ { 'id' : 1 , 'name' : 'some12345' }, { 'id' : 2 , 'name' : 'other12345' }, { 'id' : 3 , 'name' : 'another' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_any ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' ) But in this case AssertionError will be raised from assertions import assert_any actual = [ { 'id' : 1 , 'name' : 'some12345' }, { 'id' : 2 , 'name' : 'other12345' }, { 'id' : 3 , 'name' : 'another12345' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_any ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' ) assert_lte Can be used to check if left is equal or lower than right from assertions import assert_lte actual_items = 5 expected_items = 6 assert_lte ( actual_items , expected_items , what = 'Number of items' ) assert_contains Can be used to check if some object contains item from assertions import assert_contains items = [ 1 , 2 , 3 , 4 , 5 ] assert_contains ( items , 1 , 'Item' ) assert_contains ( items , 10 , 'Item' )","title":"Common"},{"location":"assertions/common/#assert_truth","text":"Used to check if an object is True from assertions import assert_truth assert_truth ([ 1 , 2 , 3 ], what = 'My array with integers' ) assert_truth ( 0 , what = 'My integer' )","title":"assert_truth"},{"location":"assertions/common/#assert_not_truth","text":"Used to check if an object is not True from assertions import assert_not_truth assert_not_truth ([ 1 , 2 , 3 ], what = 'My array with integers' ) assert_not_truth ( 0 , what = 'My integer' )","title":"assert_not_truth"},{"location":"assertions/common/#assert_all","text":"Used to compare two lists with objects. This method will iterate through each of the lists and compare the corresponding element with another. Expected that all values from actual, will equal to expected. Same as python all function. Note It is worth noting that when checking lists, sorting may not match. That is, if two lists have different sorting of elements, then the method will sort them and after that asserting will occur. This is true for all , any from assertions import assert_all actual = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_all ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' )","title":"assert_all"},{"location":"assertions/common/#assert_any","text":"Used to compare two lists with objects. This method will iterate through each of the lists and compare the corresponding element with another. Expected that any values from actual, will equal to expected. Same as python any function. This will not raise an AssertionError from assertions import assert_any actual = [ { 'id' : 1 , 'name' : 'some12345' }, { 'id' : 2 , 'name' : 'other12345' }, { 'id' : 3 , 'name' : 'another' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_any ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' ) But in this case AssertionError will be raised from assertions import assert_any actual = [ { 'id' : 1 , 'name' : 'some12345' }, { 'id' : 2 , 'name' : 'other12345' }, { 'id' : 3 , 'name' : 'another12345' } ] expected = [ { 'id' : 1 , 'name' : 'some' }, { 'id' : 2 , 'name' : 'other' }, { 'id' : 3 , 'name' : 'another' } ] assert_any ( actual , expected , keys = [ 'name' ], what = 'List of my dictionaries' )","title":"assert_any"},{"location":"assertions/common/#assert_lte","text":"Can be used to check if left is equal or lower than right from assertions import assert_lte actual_items = 5 expected_items = 6 assert_lte ( actual_items , expected_items , what = 'Number of items' )","title":"assert_lte"},{"location":"assertions/common/#assert_contains","text":"Can be used to check if some object contains item from assertions import assert_contains items = [ 1 , 2 , 3 , 4 , 5 ] assert_contains ( items , 1 , 'Item' ) assert_contains ( items , 10 , 'Item' )","title":"assert_contains"},{"location":"assertions/models/","text":"These checks are mostly related to model created with models-manager assert_model_equal Used to compare the fields of one json object with another json object. In this case, the validation will be based on the fields of the model. This can be used for example when you create an entity with specific json. And in the response you expect the same entity with the same json from models_manager import Model , Field from assertions import assert_model_equal class User ( Model ): id = Field ( json = 'id' , category = int , default = 1 ) username = Field ( json = 'username' , category = str , default = 'some' ) actual_payload = { 'id' : 1 , 'username' : 'some' } response_payload = { 'id' : 1 , 'username' : 'some' } assert_model_equal ( actual_payload , response_payload , User ) In this case, the check will go through all the model fields of the expected json object and compare it with the object received from the API response. Nested entities are not currently supported","title":"Models"},{"location":"assertions/models/#assert_model_equal","text":"Used to compare the fields of one json object with another json object. In this case, the validation will be based on the fields of the model. This can be used for example when you create an entity with specific json. And in the response you expect the same entity with the same json from models_manager import Model , Field from assertions import assert_model_equal class User ( Model ): id = Field ( json = 'id' , category = int , default = 1 ) username = Field ( json = 'username' , category = str , default = 'some' ) actual_payload = { 'id' : 1 , 'username' : 'some' } response_payload = { 'id' : 1 , 'username' : 'some' } assert_model_equal ( actual_payload , response_payload , User ) In this case, the check will go through all the model fields of the expected json object and compare it with the object received from the API response. Nested entities are not currently supported","title":"assert_model_equal"},{"location":"assertions/response/","text":"Checks that can be used on the API response. For example, to check the status of the response code assert_response_status Used to check the status of the response code from http import HTTPStatus from assertions import assert_response_status actual_status_code = HTTPStatus . OK assert_response_status ( actual_status_code , HTTPStatus . OK ) assert_attr Used to check a specific field in the response body from assertions import assert_attr response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } assert_attr ( response_body [ 'id' ], 1 , what = 'User id' ) assert_attr ( response_body [ 'email' ], 'some@gmail.com' , what = 'User email' ) assert_json Used to check the whole json object from assertions import assert_json actual_response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } expected_response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } assert_json ( actual_response_body , expected_response_body )","title":"API Response"},{"location":"assertions/response/#assert_response_status","text":"Used to check the status of the response code from http import HTTPStatus from assertions import assert_response_status actual_status_code = HTTPStatus . OK assert_response_status ( actual_status_code , HTTPStatus . OK )","title":"assert_response_status"},{"location":"assertions/response/#assert_attr","text":"Used to check a specific field in the response body from assertions import assert_attr response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } assert_attr ( response_body [ 'id' ], 1 , what = 'User id' ) assert_attr ( response_body [ 'email' ], 'some@gmail.com' , what = 'User email' )","title":"assert_attr"},{"location":"assertions/response/#assert_json","text":"Used to check the whole json object from assertions import assert_json actual_response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } expected_response_body = { 'id' : 1 , 'email' : 'some@gmail.com' , 'username' : 'username' } assert_json ( actual_response_body , expected_response_body )","title":"assert_json"},{"location":"validators/schema/","text":"These functions are used to validate the schema. The schema can be generated either by hand or with the help of a third party library such as models-manager Consider a simple example for schema validation from assertions import validate_json some_json = { 'id' : 1 , 'email' : 'som@gmail.com' , 'isActive' : True } some_json_schema = { 'title' : 'SomeObject' , 'type' : 'object' , 'properties' : { 'id' : { 'type' : 'number' }, 'email' : { 'type' : 'string' }, 'isActive' : { 'type' : 'boolean' } }, 'required' : [ 'id' , 'email' , 'isActive' ] } validate_json ( json = some_json , schema = some_json_schema ) In this example, the result will be positive and the validation will be successful. Let's look at what happens if we run validation on a non-valid json object from assertions import validate_json some_json = { 'id' : { 'error' : 'Could not load user id' }, 'email' : 'som@gmail.com' , 'isActive' : True } some_json_schema = { 'title' : 'SomeObject' , 'type' : 'object' , 'properties' : { 'id' : { 'type' : 'number' }, 'email' : { 'type' : 'string' }, 'isActive' : { 'type' : 'boolean' } }, 'required' : [ 'id' , 'email' , 'isActive' ] } validate_json ( json = some_json , schema = some_json_schema ) If we execute the example above, we get the following validation error jsonschema.exceptions.ValidationError: {'error': 'Could not load user id'} is not of type 'number' Failed validating 'type' in schema['properties']['id']: {'type': 'number'} On instance['id']: {'error': 'Could not load user id'}","title":"Json schema"}]}